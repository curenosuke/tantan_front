'use client'

import { useEffect, useState } from 'react'
import { useParams, useRouter } from 'next/navigation'
import Header from '@/components/Header'
import Sidebar from '@/components/Sidebar'

interface Question {
  id: number
  question: string
  answer: string
}

export default function WallHittingPage() {
  const params = useParams()
  const router = useRouter()
  const projectId = params.id as string
  
  const [user, setUser] = useState<{ user_id: number; email: string; created_at: string; last_login?: string } | null>(null)
  const [loading, setLoading] = useState(true)
  const [questions, setQuestions] = useState<Question[]>([])
  const [isAutoGenerated, setIsAutoGenerated] = useState(false)
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [showBackConfirmModal, setShowBackConfirmModal] = useState(false)

  // ダミーの質問データ（バックエンド未接続時のデザイン確認用）
  const dummyQuestions: Question[] = [
    {
      id: 1,
      question: "あなたの解決策は、顧客課題のどの部分を最も効果的に解決しますか？具体的な因果関係を説明してください。",
      answer: ""
    },
    {
      id: 2,
      question: "顧客セグメントとアーリーアダプターの定義に矛盾はありませんか？より具体的なターゲット像を描けますか？",
      answer: ""
    },
    {
      id: 3,
      question: "独自の価値提案と圧倒的優位性の関係性は明確ですか？競合他社との差別化要因は十分ですか？",
      answer: ""
    },
    {
      id: 4,
      question: "収益の流れと費用構造のバランスは取れていますか？持続可能なビジネスモデルになっていますか？",
      answer: ""
    },
    {
      id: 5,
      question: "主要指標は、ビジネスの成功を適切に測定できていますか？改善すべき指標はありますか？",
      answer: ""
    }
  ]

  // ダミーの自動回答データ
  const dummyAutoAnswers = [
    "解決策は、高齢化と人手不足による収益性の低下という核心的な課題を、自動化とデータ駆動の意思決定支援により解決します。具体的には、経験に依存していた農業技術をデジタル化し、若手農家でもベテラン農家と同等の判断ができるようになります。",
    "顧客セグメントは「中小規模の農業従事者」と定義していますが、アーリーアダプターとして「日本国内の米・野菜農家」を挙げています。より具体的には、「デジタル化に前向きな40-60代の中小規模農家（耕作面積5-20ha）」と定義することで、ターゲットを明確化できます。",
    "独自の価値提案は「使いやすいスマート農業ソリューション」ですが、圧倒的優位性として「独自の超小型・低消費電力センサー技術」を挙げています。この技術的優位性が価値提案の「使いやすさ」と「手頃な価格」を支える具体的な仕組みをより明確に説明する必要があります。",
    "収益の流れは「センサーデバイス販売」と「SaaS利用料」の2本柱ですが、初期導入コストが高く、農家の投資判断を阻害する可能性があります。段階的な導入プランやリースオプションの検討が必要です。また、SaaS継続率を高めるための価値提供の具体化も重要です。",
    "主要指標として「センサー導入台数」「SaaS継続率」「アプリ利用率」を設定していますが、これらは投入指標とプロセス指標に偏っています。成果指標として「農作物の収穫量向上率」「農作業時間短縮率」「農家の収益性向上率」を追加することで、ビジネスインパクトをより適切に測定できます。"
  ]

  useEffect(() => {
    const checkAuth = async () => {
      try {
        const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/auth/me`, {
          credentials: 'include',
        })
        
        if (response.ok) {
          const userData = await response.json()
          setUser(userData)
          // バックエンド未接続時はダミーデータを使用
          setQuestions(dummyQuestions)
        } else {
          window.location.href = '/login'
        }
      } catch (err) {
        // エラー時もダミーデータを使用
        setQuestions(dummyQuestions)
      } finally {
        setLoading(false)
      }
    }

    checkAuth()
  }, [])

  const handleAnswerChange = (questionId: number, answer: string) => {
    setQuestions(prev => 
      prev.map(q => 
        q.id === questionId ? { ...q, answer } : q
      )
    )
  }

  const handleAutoGenerate = () => {
    // ダミーの自動回答を各質問に設定
    const updatedQuestions = questions.map((q, index) => ({
      ...q,
      answer: dummyAutoAnswers[index] || ""
    }))
    setQuestions(updatedQuestions)
    setIsAutoGenerated(true)
  }

  const handleSubmit = () => {
    setIsSubmitting(true)
    
    // 回答データをローカルストレージに保存
    localStorage.setItem(`wall-hitting-answers-${projectId}`, JSON.stringify(questions))
    
    // 本来はここでバックエンドAPIを呼び出す
    // 現在はデザイン確認用のダミー処理
    setTimeout(() => {
      alert('質問回答が送信されました（デザイン確認用）')
      setIsSubmitting(false)
      // 反映ページに遷移
      router.push(`/canvas/${projectId}/logic-check/reflection`)
    }, 1000)
  }

  const handleBack = () => {
    setShowBackConfirmModal(true)
  }

  const handleBackConfirm = () => {
    setShowBackConfirmModal(false)
    router.push(`/canvas/${projectId}/logic-check`)
  }

  const handleBackCancel = () => {
    setShowBackConfirmModal(false)
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-slate-700 font-medium">読み込み中...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50">
      <Header user={user} />
      
      <div className="flex">
        {/* サイドバー */}
        <Sidebar projectId={projectId} />
        
        {/* メインコンテンツ */}
        <div className="flex-1 p-6">
          <div className="max-w-4xl mx-auto">
            {/* ヘッダー部分 */}
            <div className="mb-6">
              <h1 className="text-3xl font-bold text-gray-900 mb-2">論理チェック - 壁打ちパート</h1>
              <p className="text-gray-600">AIが提示した質問に回答して、リーンキャンバスを改善しましょう</p>
            </div>

            {/* 自動回答生成ボタン */}
            <div className="bg-white rounded-xl shadow-lg border border-gray-200 p-6 mb-6">
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-1">想定回答を自動生成</h3>
                  <p className="text-gray-600 text-sm">AIが各質問への回答例を自動生成します</p>
                </div>
                <button
                  onClick={handleAutoGenerate}
                  disabled={isAutoGenerated}
                  className="bg-gradient-to-r from-[#FFBB3F] to-orange-500 text-white px-6 py-3 rounded-full text-sm font-medium transition-all duration-300 transform hover:scale-110 hover:shadow-lg shadow-md disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"
                >
                  {isAutoGenerated ? '生成済み' : '自動生成'}
                </button>
              </div>
            </div>

            {/* 質問と回答セクション */}
            <div className="space-y-6 mb-8">
              {questions.map((question, index) => (
                <div key={question.id} className="bg-white rounded-xl shadow-lg border border-gray-200 p-6">
                  <div className="flex items-start mb-4">
                    <div className="bg-[#FFBB3F] text-white px-3 py-1 rounded-full text-sm font-bold mr-4 flex-shrink-0">
                      Q{index + 1}
                    </div>
                    <div className="flex-1">
                      <h3 className="text-lg font-semibold text-gray-900 mb-2">
                        {question.question}
                      </h3>
                    </div>
                  </div>
                  
                  <div className="ml-12">
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      あなたの回答
                    </label>
                    <textarea
                      value={question.answer}
                      onChange={(e) => handleAnswerChange(question.id, e.target.value)}
                      className="w-full min-h-[8rem] p-4 text-gray-700 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#FFBB3F] focus:border-[#FFBB3F] transition-colors resize-none"
                      placeholder="ここに回答を入力してください..."
                      style={{ resize: 'none' }}
                    />
                  </div>
                </div>
              ))}
            </div>

            {/* ボタンセクション */}
            <div className="flex justify-between items-start">
              {/* 戻るボタン */}
              <div className="flex flex-col items-start">
                <button
                  onClick={handleBack}
                  className="bg-red-500 hover:bg-red-600 text-white px-6 py-3 rounded-full text-sm font-medium transition-all duration-300 transform hover:scale-105 hover:shadow-md shadow-sm"
                >
                  戻る
                </button>
                <p className="text-xs text-red-600 mt-2">＊質問は失われます</p>
              </div>

              {/* 質問回答ボタン */}
              <button
                onClick={handleSubmit}
                disabled={isSubmitting}
                className="bg-gradient-to-r from-[#FFBB3F] to-orange-500 text-white px-8 py-3 rounded-full text-lg font-medium transition-all duration-300 transform hover:scale-110 hover:shadow-lg shadow-md disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"
              >
                {isSubmitting ? '送信中...' : '質問回答'}
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* 戻る確認モーダル */}
      {showBackConfirmModal && (
        <div className="fixed inset-0 flex items-center justify-center z-50" style={{ backgroundColor: 'rgba(0, 0, 0, 0.3)' }}>
          <div className="bg-white rounded-lg p-8 max-w-md w-full mx-4 shadow-2xl">
            <div className="text-center mb-6">
              <div className="bg-[#FFBB3F] text-white p-3 rounded-full w-16 h-16 mx-auto mb-4 flex items-center justify-center">
                <svg className="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
                </svg>
              </div>
              <h2 className="text-2xl font-bold text-gray-900 mb-2">戻ることを確認します</h2>
              <p className="text-gray-700">
                論理チェックを中断して戻ります。<br />
                この操作を実行してもよろしいですか？
              </p>
            </div>
            
            <div className="flex space-x-4">
              <button
                onClick={handleBackCancel}
                className="flex-1 bg-gray-300 hover:bg-gray-400 text-gray-700 px-6 py-3 rounded-full text-sm font-medium transition-all duration-300 transform hover:scale-105 hover:shadow-md shadow-sm"
              >
                キャンセル
              </button>
              <button
                onClick={handleBackConfirm}
                className="flex-1 bg-gradient-to-r from-red-600 to-red-700 text-white px-6 py-3 rounded-full text-sm font-medium transition-all duration-300 transform hover:scale-110 hover:shadow-lg shadow-md"
              >
                戻る
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
} 