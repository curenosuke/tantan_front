'use client'

import { useEffect, useState } from 'react'
import { useParams, useRouter } from 'next/navigation'
import Header from '@/components/Header'
import Sidebar from '@/components/Sidebar'
import { ConsistencyCheckResponse } from '@/api/fetchConsistencyCheck'
import fetchAutoAnswer, { AutoAnswerGenerationResponse } from '@/api/fetchAutoAnswer'
import fetchCanvasUpdate, { CanvasUpdateResponse } from '@/api/fetchCanvasUpdate'

interface Question {
  id: number
  question: string
  answer: string
  skipAnswer: boolean
}

export default function WallHittingPage() {
  const params = useParams()
  const router = useRouter()
  const projectId = params.id as string
  
  const [user, setUser] = useState<{ user_id: number; email: string; created_at: string; last_login?: string } | null>(null)
  const [loading, setLoading] = useState(true)
  const [questions, setQuestions] = useState<Question[]>([])
  const [isAutoGenerated, setIsAutoGenerated] = useState(false)
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [showBackConfirmModal, setShowBackConfirmModal] = useState(false)
  const [consistencyCheckResult, setConsistencyCheckResult] = useState<ConsistencyCheckResponse | null>(null)
  const [isGeneratingAnswers, setIsGeneratingAnswers] = useState(false)
  const [isGeneratingUpdate, setIsGeneratingUpdate] = useState(false)

  // ダミーの質問データ（バックエンド未接続時のデザイン確認用）
  const dummyQuestions: Question[] = [
    {
      id: 1,
      question: "あなたの解決策は、顧客課題のどの部分を最も効果的に解決しますか？具体的な因果関係を説明してください。",
      answer: "",
      skipAnswer: false
    },
    {
      id: 2,
      question: "顧客セグメントとアーリーアダプターの定義に矛盾はありませんか？より具体的なターゲット像を描けますか？",
      answer: "",
      skipAnswer: false
    },
    {
      id: 3,
      question: "独自の価値提案と圧倒的優位性の関係性は明確ですか？競合他社との差別化要因は十分ですか？",
      answer: "",
      skipAnswer: false
    },
    {
      id: 4,
      question: "収益の流れと費用構造のバランスは取れていますか？持続可能なビジネスモデルになっていますか？",
      answer: "",
      skipAnswer: false
    },
    {
      id: 5,
      question: "主要指標は、ビジネスの成功を適切に測定できていますか？改善すべき指標はありますか？",
      answer: "",
      skipAnswer: false
    }
  ]



  useEffect(() => {
    const checkAuth = async () => {
      try {
        const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/auth/me`, {
          credentials: 'include',
        })
        
        if (response.ok) {
          const userData = await response.json()
          setUser(userData)
          
          // ローカルストレージから整合性確認の結果を取得
          const storedResult = localStorage.getItem(`consistency-check-result-${projectId}`)
          if (storedResult) {
            try {
              const result: ConsistencyCheckResponse = JSON.parse(storedResult)
              if (result.success && result.analysis) {
                // APIの結果から質問を作成
                const apiQuestions: Question[] = [
                  { id: 1, question: result.analysis.Q1.question, answer: "", skipAnswer: false },
                  { id: 2, question: result.analysis.Q2.question, answer: "", skipAnswer: false },
                  { id: 3, question: result.analysis.Q3.question, answer: "", skipAnswer: false },
                  { id: 4, question: result.analysis.Q4.question, answer: "", skipAnswer: false },
                  { id: 5, question: result.analysis.Q5.question, answer: "", skipAnswer: false }
                ]
                setQuestions(apiQuestions)
                setConsistencyCheckResult(result)
              } else {
                // APIの結果が不正な場合はダミーデータを使用
                setQuestions(dummyQuestions)
              }
            } catch (parseError) {
              console.error('整合性確認結果のパースエラー:', parseError)
              setQuestions(dummyQuestions)
            }
          } else {
            // 整合性確認の結果がない場合はダミーデータを使用
            setQuestions(dummyQuestions)
          }
        } else {
          window.location.href = '/login'
        }
      } catch (err) {
        console.error('認証チェックエラー:', err)
        // エラー時もダミーデータを使用
        setQuestions(dummyQuestions)
      } finally {
        setLoading(false)
      }
    }

    checkAuth()
  }, [projectId])

  const handleAnswerChange = (questionId: number, answer: string) => {
    setQuestions(prev => 
      prev.map(q => {
        if (q.id === questionId) {
          // skipAnswerがtrueの場合は回答を変更しない
          if (q.skipAnswer) {
            return q
          }
          return { ...q, answer }
        }
        return q
      })
    )
  }

  const handleSkipAnswerChange = (questionId: number, skipAnswer: boolean) => {
    setQuestions(prev => 
      prev.map(q => 
        q.id === questionId ? { ...q, skipAnswer } : q
      )
    )
  }

  const handleAutoGenerate = async () => {
    if (!consistencyCheckResult || !consistencyCheckResult.analysis) {
      alert('整合性確認の結果がありません。先に論理チェックを実行してください。')
      return
    }
    
    setIsGeneratingAnswers(true)
    
    try {
      // 質問データを準備
      const questionsData = [
        { question: consistencyCheckResult.analysis.Q1.question, perspective: consistencyCheckResult.analysis.Q1.perspective },
        { question: consistencyCheckResult.analysis.Q2.question, perspective: consistencyCheckResult.analysis.Q2.perspective },
        { question: consistencyCheckResult.analysis.Q3.question, perspective: consistencyCheckResult.analysis.Q3.perspective },
        { question: consistencyCheckResult.analysis.Q4.question, perspective: consistencyCheckResult.analysis.Q4.perspective },
        { question: consistencyCheckResult.analysis.Q5.question, perspective: consistencyCheckResult.analysis.Q5.perspective }
      ]
      
      // AI回答生成APIを呼び出し
      const result = await fetchAutoAnswer(parseInt(projectId), questionsData)
      
      if (result && result.success && result.answers) {
        // 生成された回答を各質問に設定
        const updatedQuestions = questions.map((q, index) => ({
          ...q,
          answer: result.answers![index] || ""
        }))
        setQuestions(updatedQuestions)
        setIsAutoGenerated(true)
        alert('AIが回答を自動生成しました！')
      } else {
        alert('AI回答生成に失敗しました。もう一度お試しください。')
      }
    } catch (error) {
      console.error('AI回答生成エラー:', error)
      alert('AI回答生成中にエラーが発生しました。もう一度お試しください。')
    } finally {
      setIsGeneratingAnswers(false)
    }
  }

  const handleSubmit = async () => {
    if (!consistencyCheckResult || !consistencyCheckResult.analysis) {
      alert('整合性確認の結果がありません。先に論理チェックを実行してください。')
      return
    }
    
    // 空の回答があるかチェック
    const hasEmptyAnswers = questions.some(q => !q.skipAnswer && !q.answer.trim())
    if (hasEmptyAnswers) {
      alert('すべての質問に回答するか、「答えない」にチェックを入れてください。')
      return
    }
    
    setIsGeneratingUpdate(true)
    
    try {
      // ユーザーの回答データを準備
      const userAnswers = questions.map((q, index) => ({
        question: consistencyCheckResult.analysis![`Q${index + 1}` as keyof typeof consistencyCheckResult.analysis].question,
        answer: q.skipAnswer ? "無回答" : q.answer,
        perspective: consistencyCheckResult.analysis![`Q${index + 1}` as keyof typeof consistencyCheckResult.analysis].perspective
      }))
      
      // リーンキャンバス更新案生成APIを呼び出し
      const result = await fetchCanvasUpdate(parseInt(projectId), userAnswers)
      
      if (result && result.success && result.updates && result.updated_canvas) {
        // 結果をローカルストレージに保存してreflectionページに遷移
        localStorage.setItem('canvasUpdateResult', JSON.stringify(result))
        
        // ユーザーの回答も保存
        const userAnswersData = {
          questions: questions.map(q => ({
            id: q.id,
            question: q.question,
            answer: q.skipAnswer ? "無回答" : q.answer
          })),
          consistencyCheckResult: consistencyCheckResult
        }
        localStorage.setItem('userAnswersData', JSON.stringify(userAnswersData))
        
        router.push(`/canvas/${projectId}/logic-check/reflection`)
      } else {
        alert('リーンキャンバス更新案生成に失敗しました。もう一度お試しください。')
      }
    } catch (error) {
      console.error('リーンキャンバス更新案生成エラー:', error)
      alert('リーンキャンバス更新案生成中にエラーが発生しました。もう一度お試しください。')
    } finally {
      setIsGeneratingUpdate(false)
    }
  }

  const handleBack = () => {
    setShowBackConfirmModal(true)
  }

  const handleBackConfirm = () => {
    setShowBackConfirmModal(false)
    router.push(`/canvas/${projectId}/logic-check`)
  }

  const handleBackCancel = () => {
    setShowBackConfirmModal(false)
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 flex items-center justify-center">
        <div className="text-center">
          {/* AI思考アニメーション */}
          <div className="relative mb-6">
            <div className="w-20 h-20 bg-gradient-to-r from-[#FFBB3F] to-orange-500 rounded-full flex items-center justify-center shadow-lg">
              <svg className="w-10 h-10 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
              </svg>
            </div>
            
            {/* 思考の波紋エフェクト */}
            <div className="absolute inset-0 w-20 h-20 border-2 border-[#FFBB3F] rounded-full animate-ping opacity-75"></div>
            <div className="absolute inset-0 w-20 h-20 border-2 border-orange-500 rounded-full animate-ping opacity-50" style={{ animationDelay: '0.5s' }}></div>
          </div>
          
          <h2 className="text-2xl font-bold text-gray-900 mb-3">AIが質問を準備中...</h2>
          <p className="text-gray-600 mb-6">リーンキャンバスの分析結果から最適な質問を生成しています</p>
          
          {/* プログレスバー */}
          <div className="w-64 bg-gray-200 rounded-full h-2 mx-auto mb-4">
            <div className="bg-gradient-to-r from-[#FFBB3F] to-orange-500 h-2 rounded-full animate-pulse"></div>
          </div>
          
          {/* 思考プロセス */}
          <div className="max-w-md mx-auto">
            <div className="space-y-2">
              <div className="flex items-center space-x-2 text-sm text-gray-600">
                <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                <span>分析結果を整理中...</span>
              </div>
              <div className="flex items-center space-x-2 text-sm text-gray-600">
                <div className="w-2 h-2 bg-blue-500 rounded-full animate-pulse" style={{ animationDelay: '200ms' }}></div>
                <span>質問の優先順位を決定中...</span>
              </div>
              <div className="flex items-center space-x-2 text-sm text-gray-600">
                <div className="w-2 h-2 bg-purple-500 rounded-full animate-pulse" style={{ animationDelay: '400ms' }}></div>
                <span>最適な質問を生成中...</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    )
  }

  // 整合性確認の結果がない場合の処理
  if (!consistencyCheckResult || !consistencyCheckResult.analysis) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50">
        <Header user={user} />
        
        <div className="flex">
          <Sidebar projectId={projectId} />
          
          <div className="flex-1 p-6">
            <div className="max-w-4xl mx-auto">
              <div className="text-center py-12">
                <div className="bg-yellow-100 text-yellow-800 p-6 rounded-xl border border-yellow-200 mb-6">
                  <h2 className="text-2xl font-bold mb-4">論理チェックが実行されていません</h2>
                  <p className="text-lg mb-6">
                    壁打ちパートに進む前に、まず論理チェックを実行してください。
                  </p>
                  <button
                    onClick={() => router.push(`/canvas/${projectId}/logic-check`)}
                    className="bg-gradient-to-r from-[#FFBB3F] to-orange-500 text-white px-8 py-3 rounded-full text-lg font-medium transition-all duration-300 transform hover:scale-110 hover:shadow-lg shadow-md"
                  >
                    論理チェックページに戻る
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50">
      <Header user={user} />
      
      <div className="flex">
        {/* サイドバー */}
        <Sidebar projectId={projectId} />
        
        {/* メインコンテンツ */}
        <div className="flex-1 p-6">
          <div className="max-w-4xl mx-auto">
            {/* ヘッダー部分 */}
            <div className="mb-6">
              <div className="flex items-center mb-4">
                <h1 className="text-3xl font-bold text-gray-900 mr-4">論理チェック - 壁打ちパート</h1>
                {/* AI分析完了バッジ */}
                               <div className="bg-gradient-to-r from-blue-50 to-purple-50 text-blue-800 px-3 py-1 rounded-full border border-blue-200 flex items-center space-x-2">
                 <div className="w-2 h-2 bg-blue-500 rounded-full animate-pulse"></div>
                 <span className="text-sm font-medium">AI分析完了</span>
               </div>
              </div>
              
              <p className="text-gray-600 mb-4">AIが提示した質問に回答して、リーンキャンバスを改善しましょう</p>
              
              {/* 整合性確認の結果が表示されている場合の情報 */}
              {consistencyCheckResult && consistencyCheckResult.analyzed_at && (
                <div className="bg-gradient-to-r from-blue-50 to-purple-50 border border-blue-200 rounded-xl p-4">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                                           <div className="bg-blue-100 text-blue-600 p-2 rounded-full">
                       <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                         <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
                       </svg>
                     </div>
                      <div>
                        <p className="text-sm font-medium text-blue-700">
                          分析日時: {new Date(consistencyCheckResult.analyzed_at).toLocaleString('ja-JP')}
                        </p>
                        <p className="text-xs text-blue-600">
                          AIがリーンキャンバスを分析し、5つの改善ポイントを特定しました
                        </p>
                      </div>
                    </div>
                    
                    {/* 分析品質バッジ */}
                    
                  </div>
                </div>
              )}
            </div>

            {/* 自動回答生成ボタン */}
            <div className="bg-white rounded-xl shadow-lg border border-gray-200 p-6 mb-6">
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-1">想定回答を自動生成</h3>
                  <p className="text-gray-600 text-sm">AIが各質問への回答例を自動生成します</p>
                </div>
                {isGeneratingAnswers ? (
                  <div className="bg-gradient-to-r from-[#FFBB3F] to-orange-500 text-white px-6 py-3 rounded-full text-sm font-medium shadow-md">
                    <div className="flex items-center space-x-2">
                      {/* AI思考アニメーション */}
                      <div className="flex space-x-1">
                        <div className="w-2 h-2 bg-white rounded-full animate-bounce" style={{ animationDelay: '0ms' }}></div>
                        <div className="w-2 h-2 bg-white rounded-full animate-bounce" style={{ animationDelay: '150ms' }}></div>
                        <div className="w-2 h-2 bg-white rounded-full animate-bounce" style={{ animationDelay: '300ms' }}></div>
                      </div>
                      <span>AIが回答生成中...</span>
                    </div>
                  </div>
                ) : (
                  <button
                    onClick={handleAutoGenerate}
                    disabled={isAutoGenerated}
                    className="bg-gradient-to-r from-[#FFBB3F] to-orange-500 text-white px-6 py-3 rounded-full text-sm font-medium transition-all duration-300 transform hover:scale-110 hover:shadow-lg shadow-md disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"
                  >
                    {isAutoGenerated ? '生成済み' : '自動生成'}
                  </button>
                )}
              </div>
            </div>

            {/* 質問と回答セクション */}
            <div className="space-y-6 mb-8">
              {questions.map((question, index) => (
                <div key={question.id} className="bg-white rounded-xl shadow-lg border border-gray-200 p-6">
                  <div className="flex items-start mb-4">
                    <div className="bg-[#FFBB3F] text-white px-3 py-1 rounded-full text-sm font-bold mr-4 flex-shrink-0">
                      Q{index + 1}
                    </div>
                    <div className="flex-1">
                      <div className="flex items-center mb-2">
                        <h3 className="text-lg font-semibold text-gray-900 mr-3">
                          {question.question}
                        </h3>
                        {/* AI生成マーク */}
                        
                      </div>
                      
                                             {/* 質問の分析観点 */}
                       <div className="text-sm text-gray-500 mb-3">
                         <span className="font-medium">分析観点:</span> 
                         {(() => {
                           const questionKey = `Q${index + 1}` as keyof typeof consistencyCheckResult.analysis
                           return consistencyCheckResult?.analysis?.[questionKey]?.perspective || "分析観点が設定されていません"
                         })()}
                       </div>
                    </div>
                  </div>
                  
                  <div className="ml-12">
                    <div className="flex items-center justify-between mb-2">
                      <label className="block text-sm font-medium text-gray-700">
                        あなたの回答
                      </label>
                      <div className="flex items-center space-x-2">
                                                 <input
                           type="checkbox"
                           id={`skip-${question.id}`}
                           checked={question.skipAnswer}
                           onChange={(e) => handleSkipAnswerChange(question.id, e.target.checked)}
                           className="w-4 h-4 text-white bg-orange-50 border-orange-300 rounded focus:ring-orange-500 focus:ring-2 hover:bg-orange-100 transition-colors [&:checked]:bg-orange-500 [&:checked]:border-orange-500 [&:checked]:ring-orange-500"
                           style={{ 
                             accentColor: '#ffffff',
                             '--tw-ring-color': '#f97316'
                           } as React.CSSProperties}
                         />
                        <label htmlFor={`skip-${question.id}`} className="text-sm text-gray-600">
                          答えない
                        </label>
                      </div>
                    </div>
                    <textarea
                      value={question.skipAnswer ? "無回答" : question.answer}
                      onChange={(e) => handleAnswerChange(question.id, e.target.value)}
                      disabled={question.skipAnswer}
                      className={`w-full min-h-[8rem] p-4 border rounded-lg transition-colors resize-none ${
                        question.skipAnswer
                          ? 'bg-gray-100 text-gray-500 border-gray-200 cursor-not-allowed'
                          : 'text-gray-700 border-gray-300 focus:ring-2 focus:ring-[#FFBB3F] focus:border-[#FFBB3F]'
                      }`}
                      placeholder={question.skipAnswer ? "無回答" : "ここに回答を入力してください..."}
                      style={{ resize: 'none' }}
                    />
                  </div>
                </div>
              ))}
            </div>

            {/* ボタンセクション */}
            <div className="flex justify-between items-start">
              {/* 戻るボタン */}
              <div className="flex flex-col items-start">
                <button
                  onClick={handleBack}
                  className="bg-red-500 hover:bg-red-600 text-white px-6 py-3 rounded-full text-sm font-medium transition-all duration-300 transform hover:scale-105 hover:shadow-md shadow-sm"
                >
                  戻る
                </button>
                <p className="text-xs text-red-600 mt-2">＊質問は失われます</p>
              </div>

              {/* 質問回答ボタン */}
              {isGeneratingUpdate ? (
                <div className="bg-gradient-to-r from-[#FFBB3F] to-orange-500 text-white px-8 py-3 rounded-full text-lg font-medium shadow-md">
                  <div className="flex items-center space-x-2">
                    {/* AI思考アニメーション */}
                    <div className="flex space-x-1">
                      <div className="w-2 h-2 bg-white rounded-full animate-bounce" style={{ animationDelay: '0ms' }}></div>
                      <div className="w-2 h-2 bg-white rounded-full animate-bounce" style={{ animationDelay: '150ms' }}></div>
                      <div className="w-2 h-2 bg-white rounded-full animate-bounce" style={{ animationDelay: '300ms' }}></div>
                    </div>
                    <span>AIが更新案生成中...</span>
                  </div>
                </div>
              ) : (
                <button
                  onClick={handleSubmit}
                  disabled={isSubmitting}
                  className="bg-gradient-to-r from-[#FFBB3F] to-orange-500 text-white px-8 py-3 rounded-full text-lg font-medium transition-all duration-300 transform hover:scale-110 hover:shadow-lg shadow-md disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"
                >
                  {isSubmitting ? '送信中...' : '質問回答'}
                </button>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* 戻る確認モーダル */}
      {showBackConfirmModal && (
        <div className="fixed inset-0 flex items-center justify-center z-50" style={{ backgroundColor: 'rgba(0, 0, 0, 0.3)' }}>
          <div className="bg-white rounded-lg p-8 max-w-md w-full mx-4 shadow-2xl">
            <div className="text-center mb-6">
              <div className="bg-[#FFBB3F] text-white p-3 rounded-full w-16 h-16 mx-auto mb-4 flex items-center justify-center">
                <svg className="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
                </svg>
              </div>
              <h2 className="text-2xl font-bold text-gray-900 mb-2">戻ることを確認します</h2>
              <p className="text-gray-700">
                論理チェックを中断して戻ります。<br />
                この操作を実行してもよろしいですか？
              </p>
            </div>
            
            <div className="flex space-x-4">
              <button
                onClick={handleBackCancel}
                className="flex-1 bg-gray-300 hover:bg-gray-400 text-gray-700 px-6 py-3 rounded-full text-sm font-medium transition-all duration-300 transform hover:scale-105 hover:shadow-md shadow-sm"
              >
                キャンセル
              </button>
              <button
                onClick={handleBackConfirm}
                className="flex-1 bg-gradient-to-r from-red-600 to-red-700 text-white px-6 py-3 rounded-full text-sm font-medium transition-all duration-300 transform hover:scale-110 hover:shadow-lg shadow-md"
              >
                戻る
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
} 